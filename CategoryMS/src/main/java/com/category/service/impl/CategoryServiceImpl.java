package com.category.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.category.dto.CategoryDTO;
import com.category.model.Category;
import com.category.repository.CategoryRepository;
import com.category.service.ICategoryService;
import com.category.service.SequenceGeneratorService;
@Service
public class CategoryServiceImpl implements ICategoryService {
	@Autowired
	CategoryRepository categoryRepository;
	
	@Autowired
	SequenceGeneratorService generatorService;

	@Override
	public List<CategoryDTO> readAllCategory() {
	List<Category> categoryList=categoryRepository.findAll();
	List<CategoryDTO> categoryDTOList=new ArrayList<>();
	categoryList.forEach(category->{
		CategoryDTO categoryDTO=new CategoryDTO();
		BeanUtils.copyProperties(category,categoryDTO);
		categoryDTOList.add(categoryDTO);
	});
		return categoryDTOList;
	}

	@Override
	public List<CategoryDTO> readAllCategoryWithPagingAndSorting(int pageNo, int pageSize) {
		Sort sort=Sort.by(Direction.ASC, "id");
		Pageable page=PageRequest.of(pageNo, pageSize,sort);
		List<Category> categoryList=categoryRepository.findAll(page).getContent();
		List<CategoryDTO> categoryDTOList=new ArrayList<>();
	    categoryList.forEach(category->{
	    	CategoryDTO categoryDTO=new CategoryDTO();
	    	BeanUtils.copyProperties(category, categoryDTO);
	    	categoryDTOList.add(categoryDTO);
	    	
	    });
		return categoryDTOList;
	}

	@Override
	public CategoryDTO readCategoryById(Long id) {
		Optional<Category> optional=categoryRepository.findById(id);
		if (optional.isPresent()) {
			Category category=optional.get();
			CategoryDTO categoryDTO=new CategoryDTO();
			BeanUtils.copyProperties(category, categoryDTO);
	         return categoryDTO;
		}
		return null;
	}

	@Override
	public CategoryDTO readCategoryByName(String category) {
		Optional<Category> optional=categoryRepository.findByCategoryName(category);
		
		if (optional.isPresent()) {
			Category categoryObj=optional.get();
			CategoryDTO categoryDTOObj=new CategoryDTO();
			BeanUtils.copyProperties(categoryObj, categoryDTOObj);
			return categoryDTOObj;
		}
		return null;
	}

	@Override
	public List<CategoryDTO> readAllCategoriesStartWithName(String category) {
		List<Category> categoryList=categoryRepository.findAllCategoriesStartWithName(category);
		List<CategoryDTO> categoryDTOList=new ArrayList<>();
		categoryList.forEach(categoryObj->{
			CategoryDTO categoryDTOObj=new CategoryDTO();
			BeanUtils.copyProperties(categoryObj,categoryDTOObj);
			categoryDTOList.add(categoryDTOObj);
		});
			return categoryDTOList;
	
	}

	@Override
	public CategoryDTO saveCategory(CategoryDTO categoryDTO) {
		Category category=new Category();
		BeanUtils.copyProperties(categoryDTO, category);
		Optional<Category> optional=categoryRepository.findByCategoryName(category.getCategory());
		//categoryRepository.existsById(category.getId()) //id is autogenerated hence findByCategoryName use for checking
		if (optional.isPresent())
		{
			return null;
		}
		else
		{
		category.setId(generatorService.generateSequence(Category.SEQUENCE_NAME));//auto generated id in spring data mongodb
		Category categoryObj=categoryRepository.save(category);
		CategoryDTO categoryDTOObj=new CategoryDTO();
		BeanUtils.copyProperties(categoryObj, categoryDTOObj);
		return categoryDTOObj;
		}
		
	}

	@Override
	public String removeCategoryById(Long id) {
	if (categoryRepository.existsById(id)) {
		categoryRepository.deleteById(id);
		return "deleted "+id;
	}
	else
	{
		return "category id doesn,t exist "+id;
	}
	}

	@Override
	public String removeAllCategory() {
		if (categoryRepository.count()!=0) {
			categoryRepository.deleteAll();
			return "deleted all records";
		}
		return "no records found";
	}

	@Override
	public CategoryDTO editCategory(CategoryDTO categoryDTO) {
		Category category=new Category();
		BeanUtils.copyProperties(categoryDTO, category);
		if (categoryRepository.existsById(category.getId()))
		{
			Category categoryObj=categoryRepository.save(category);
			CategoryDTO categoryDTOObj=new CategoryDTO();
			BeanUtils.copyProperties(categoryObj, categoryDTOObj);
			return categoryDTOObj;
		}
		else
		{
			return null;
		}
		
	}

	@Override
	public Long totalCategory() {
		Long categoryCount=categoryRepository.count();
		return categoryCount;
	}

}
